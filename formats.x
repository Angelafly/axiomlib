Форматы input-файлов для axiomlib.

22 февраля 2006 года.
----------------------------------


  Конфигурационный файл
  ---------------------
    BaseDataSetDir "/path/to/data/set/dir"
    DataSet "dataset_name"

    AxiomBaseDir "/path/to/axiom/base"

    AxiomSetBaseDir "/path/to/axiom/sets"
    AxiomSet "axiom_set_name1"
    AxiomSet "axiom_set_name2"

    Mode "expert"

  Набор данных
  ------------
  
    Набор данных состоит из:
      * метаинформация
          - список классов нештатных ситуаций
              для каждой - название (string, может быть просто номером)
      * обучающая выборка (эталонные ряды)
          - для каждой нештатной ситуации - эталонные ряды (их может быть несколько)
          - эталонные ряды нормального поведения - их тоже может быть несколько
      * тестовая выборка (их может быть несколько, в каждой - несколько рядов)
          - содержит корректную разбивку на участки штатного и нештатного поведения
      
    Набор данных содержится в выделенной директории.
    Структура директории:
        /dataset			корень
	    class_names			названия классов через ","
	    param_names			названия параметров (там может быть "time", а может и не быть)
	    /reference			обучающая выборка (эталонные ряды)
	       /class_name1		данные для класса 1
	           run1.csv		траектория 1 для класса 1
		   ...
	           runK.csv		траектория K для класса 1
	       ...
	       /class_nameN		данные для класса N
           /testing
	       run1.csv			первый тестовый запуск
	       run1-ref.csv		эталонная разбивка первого запуска на участки штатных и нештатных ситуаций
	       ...
	       runP.csv			P--й тестовый запуск
	       runP-ref.csv		эталонная разбивка P-го запуска на участки штатных и нештатных ситуаций

    Формат csv-файлов:

        time; param1; param2; param3
        0; 123.45; .34; 0.37
        1.5;123;.34;0.37;
        2.5; 0.0; .0; 00

    // Многомерный временной ряд (unstructured)
    // там хранится
    class MultiTS {
      vector<vector<double> > data; // по числу paramNames
      vector<bool> validParams; // validParams[i]=0, если i-й параметр отсутсвует в ряде, =1 иначе
//      int ref_id; // уникальный идентификатор
      
      bool getTSByIndex(vector<double>*, int i); // =1 если все ok; =0 если этого параметра нет; i - номер параметра
    }
    
    // Набор эталонных временных рядов
    // индекс ветора - номер класса во внутреннем смысле (см. classNames)
    typedef vector<ClassTS> ReferenceClassesTS;
    
    // Набор эталонных временных рядов для одного класса
    typedef vector<MultiTS> ClassTS;
    
    Базы аксиом
    -----------
    
        Аксиома состоит из элементарных условий. Пока мы рассматриваем только конъюнкции 2 элементарных
	условий.
	Аксиома является именованной сущностью. Имя уникально в рамках данной базы аксиом.
	
	База аксиом хранится в отдельном каталоге:
	  /axiom_base1
	    name.x			название базы аксиом
	    name1.ax			файл аксиомы
	    name2.ax			файл аксиомы
	    name3.ax			файл аксиомы
	
	Формат файла аксиом:
	  название аксиомы (должно совпадать с именем файла)
	  элементарное условие 1 AND элементарное условие 2
        или	
	  название аксиомы (должно совпадать с именем файла)
	  элементарное условие 1


    Система аксиом
    --------------

        name.as				система аксиом
	
	Формат файла системы аксиом:
	
        название системы аксиом (должно совпадать с именем файла)
	название используемой базы аксиом
	1: название аксиомы 1
	    EC1: "param name" -> "param value"
	    EC1: "param name 2" -> "param value 2"
	    ...
	    EC1: "param name N" -> "param value N"
	    EC2: "param name" -> "param value"
	    EC2: "param name 2" -> "param value 2"
	    ...
	    EC2: "param name M" -> "param value M"
	...
	N: название аксиомы N
	
	
